nameOverride: ""
fullnameOverride: ""

paperless:
  imagePullSecrets: []
  image:
    repository: "ghcr.io/paperless-ngx/paperless-ngx"
    pullPolicy: IfNotPresent
    # -- Overrides the image tag whose default is the chart appVersion.
    tag: ""

  # -- Number of deployment replicas. Note that the paperless container is not ready for multi-replica deployments
  replicaCount: 1

  url: https://paperless-ngx.example.com
  # -- Set if accessing paperless via a domain subpath e.g. https://domain.com/PATHPREFIX and using a reverse-proxy like traefik or nginx. Expects a prefix like "/prefix-path"
  pathPrefix: ""
  # -- Override the default app title shown in the frontend
  appTitle: "Paperless-ngx"

  secretKey:
    # -- Paperless server secret for tokens/etc. This should be a long random string
    value: ""
    existingSecret: {}
    #  name: ""
    #  key: ""
  # -- Paperless server Timezone
  tz: UTC
  ocr:
    # -- OCR default language. See https://packages.debian.org/search?keywords=tesseract-ocr-&searchon=names&suite=buster
    defaultLanguage: eng
    # -- OCR extra languages.
    extraLanguages: deu fra

  admin:
    # -- Whether to install a default admin user with the provided credentials.
    enabled: false
    user:
      # -- Name of the admin user
      name: "admin"
      existingSecret: {}
      #  name: ""
      #  key: ""
    email:
      # -- Email of the admin user
      address: "admin@exmaple.com"
      existingSecret: {}
      #  name: ""
      #  key: ""
    password:
      # -- Password of the admin user
      value: ""
      existingSecret: {}
      #  name: ""
      #  key: ""

  smtp:
    host:
      # -- SMTP host to relay Emails to
      name: localhost
      existingSecret: {}
      #  name: ""
      #  key: ""
    port:
      # -- Port of the SMTP host
      value: 25
      existingSecret: {}
      #  name: ""
      #  key: ""
    user:
      # -- SMTP login user
      name: ""
      existingSecret: {}
      #  name: ""
      #  key: ""
    from:
      # -- SMTP FROM email address
      address: "no-reply-paperless@exmaple.com"
      existingSecret: {}
      #  name: ""
      #  key: ""
    password:
      # -- SMTP login password
      value: ""
      existingSecret: {}
      #  name: ""
      #  key: ""
    # -- Whether to enable SMTP encryption or not. Valid options are false/"", "ssl", "tls"
    encryption: ""

  # -- Additional Configuration parameters to pass to paperless. Expects key-value pairs of config options and values. See https://docs.paperless-ngx.com/configuration
  extraConfig: {}
  #  PAPERLESS_CONSUMER_POLLING: 30

  volumes:
    data:
      mountPath: /usr/src/paperless/data
      persistence:
        # -- Enable persistence for the data directory containing paperless application data.
        # Disable for an ephemeral install.
        enabled: true
        # --- Optionally specify an existing PV to bind to, instead of creating a new one on install
        volumeName: ""
        storageClass: ""
        accessMode: ReadWriteOnce
        size: 5Gi
    media:
      mountPath: /usr/src/paperless/media
      persistence:
        # -- Enable persistence for the media directory containing processed documents.
        # Disable for an ephemeral install.
        enabled: true
        # --- Optionally specify an existing PV to bind to, instead of creating a new one on install
        volumeName: ""
        storageClass: ""
        accessMode: ReadWriteOnce
        size: 5Gi
    consumption:
      mountPath: /usr/src/paperless/consume
      persistence:
        # -- Enable PV/PVC creation for the consumption directory containing incoming documents.
        # If disabled, the consumption directory will not be exposed, so uploads will only be possible via the API/WebUI
        enabled: true
        # --- Optionally specify an existing PV to bind to, instead of creating a new one on install.
        volumeName: ""
        storageClass: ""
        accessMode: ReadWriteOnce
        size: 5Gi
    export:
      mountPath: /usr/src/paperless/export
      persistence:
        # -- Enable PV/PVC creation for the export directory containing exported data.
        # If disabled, there will be no exposed export directory
        enabled: true
        # --- Optionally specify an existing PV to bind to, instead of creating a new one on install.
        volumeName: ""
        storageClass: ""
        accessMode: ReadWriteOnce
        size: 5Gi

  extraVolumes: []
  # - name: consumption
  #   secret:
  #     secretName: mysecret
  #     optional: false
  extraVolumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

  # -- Additional environment variables to be passed into paperless
  extraEnv: []
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podAnnotations: {}
  podLabels: {}
  podSecurityContext:
    fsGroup: 1000
  securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000
  resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
  livenessProbe:
    httpGet:
      path: /
      port: 8000
    initialDelaySeconds: 120
  readinessProbe:
    # -- Enable a custom Readiness Probe. By default, a readiness Probe to /api/status/ will be enabled if a default admin user is enabled.
    custom: {}
      # httpGet:
      #   path: /api/status/
      #   httpHeaders:
      #     - name: Authorization
      #       value: Token/Basic: "secret"
      #   port: 8000

service:
  # -- How to expose paperless to the k8s cluster. If you want to configure external access, use the `ingress` configuration instead.
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: paperless-ngx.example.com
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: paperless-ngx-tls
  #    hosts:
  #      - paperless-ngx.example.com

redis:
  # -- Install a simple managed redis instance. Ignored if an external redis server is defined below
  enabled: true
  port: 6379
  imagePullSecrets: []
  image:
    repository: "docker.io/library/redis"
    pullPolicy: IfNotPresent
    tag: "8.2"
  persistence:
    enabled: true
    # --- Optionally specify an existing PV to bind to, instead of creating a new one on install
    volumeName: ""
    storageClass: ""
    accessMode: ReadWriteOnce
    size: 1Gi
  extraVolumes: []
  extraVolumeMounts: []
  extraEnv: []
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podAnnotations: {}
  podLabels: {}
  podSecurityContext:
    fsGroup: 999
  securityContext: {}
  resources: {}

externalRedis:
  # -- Use an external redis server through its url starting with redis://. This disables the bundled redis
  url: ""
  # -- Load the redis URL from an existing secret instead
  existingSecret:
  #  name: ""
  #  key: ""

tika:
  # -- Use the bundled tika install for document processing. Ignored if `external.endpoint` is set
  enabled: true
externalTika:
  # -- External Tika URL as expected by paperless, e.g: http://localhost:9998
  endpoint: ""

gotenberg:
  # -- Use the bundled gotenberg install. Ignored if `external.endpoint` is set
  enabled: true
externalGotenberg:
  # -- Gotenberg URL as expected by paperless, e.g: http://localhost:3000
  endpoint: ""

db:
  # -- The type of external DB to use (`mariadb/postgresql`). If empty, will use the internal sqlite DB. If you want to use an external MariaDB/Postgres instance, specify its configuration in `db.external``
  type: ""
  external:
    host:
      # -- Remote DB hostname
      name: ""
      existingSecret: {}
      #  name: ""
      #  key: ""
    port:
      # -- Remote DB port
      value: 5432
      existingSecret: {}
      #  name: ""
      #  key: ""
    database:
      # -- Remote DB database
      name: ""
      existingSecret: {}
      #  name: ""
      #  key: ""
    user:
      # -- Remote DB username
      name: ""
      existingSecret: {}
      #  name: ""
      #  key: ""
    password:
      # -- Remote DB password
      value: ""
      existingSecret: {}
      #  name: ""
      #  key: ""
    # -- Remote DB SSL/TLS connection mode. See https://docs.paperless-ngx.com/configuration/#PAPERLESS_DBSSLMODE
    sslMode: ""
    sslRootCert:
      # -- Remote DB server TLS certificate
      certificate: ""
      existingSecret: {}
      #  name: ""
      #  key: ""
    sslClientCert:
      # -- Remote DB client TLS certificate
      certificate: ""
      existingSecret: {}
      #  name: ""
      #  key: ""
    sslClientKey:
      # -- Remote DB client TLS key
      key: ""
      existingSecret: {}
      #  name: ""
      #  key: ""
